import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf

# Your remaining code...

# Fetch historical data for an asset
ticker = "AAPL"
data = yf.download(ticker, start="2020-01-01", end="2023-01-01")
data['Returns'] = data['Adj Close'].pct_change()

# Calculate Realized Volatility (RV) using a rolling window (e.g., 21 days)
window = 21  # 21 trading days = 1 month
data['RV'] = data['Returns'].rolling(window).std() * np.sqrt(252)  # Annualized realized vol

# Assuming a constant implied volatility (IV) value as a placeholder
# Replace this with actual IV data for better accuracy
data['IV'] = 0.25  # Example: 25% implied volatility

# Strategy parameters
entry_threshold = 0.05  # e.g., trade when IV - RV > 5%
exit_threshold = 0.03   # exit trade when IV - RV < 3%
position = 0            # 1 for short vol position, 0 for no position
strategy_returns = []

# Strategy loop
for i in range(1, len(data)):
    iv = data['IV'].iloc[i]
    rv = data['RV'].iloc[i]
    if position == 0:
        # Check for entry condition: if IV significantly exceeds RV
        if iv - rv > entry_threshold:
            position = 1  # Enter short volatility position
            entry_price = data['Adj Close'].iloc[i]
    elif position == 1:
        # Check for exit condition
        if iv - rv < exit_threshold:
            position = 0  # Exit position
            # Calculate the strategy return
            exit_price = data['Adj Close'].iloc[i]
            trade_return = (entry_price - exit_price) / entry_price  # profit from short vol
            strategy_returns.append(trade_return)

# Calculate cumulative returns for the strategy
cumulative_strategy_return = np.cumprod([1 + r for r in strategy_returns])[-1]

# Results
print(f"Cumulative Return of Strategy: {cumulative_strategy_return:.2%}")

# Plotting RV vs. IV to visualize when the strategy would engage
plt.figure(figsize=(12, 6))
plt.plot(data.index, data['IV'], label='Implied Volatility (IV)', color='orange')
plt.plot(data.index, data['RV'], label='Realized Volatility (RV)', color='blue')
plt.legend()
plt.title("Implied vs Realized Volatility")
plt.xlabel("Date")
plt.ylabel("Volatility")
plt.show()